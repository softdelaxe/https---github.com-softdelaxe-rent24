import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: appTheme.gray5001,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(5.h),
          ),
          shadowColor: appTheme.black900.withOpacity(0.25),
          elevation: 10,
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: colorScheme.primary,
            width: 2.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        side: BorderSide(
          width: 1,
        ),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 25,
        space: 25,
        color: colorScheme.primary,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.black900,
          fontSize: 17.fSize,
          fontFamily: 'Sansation',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.black900,
          fontSize: 15.fSize,
          fontFamily: 'Ubuntu',
          fontWeight: FontWeight.w400,
        ),
        displayMedium: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 40.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w700,
        ),
        headlineLarge: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 30.fSize,
          fontFamily: 'Nunito',
          fontWeight: FontWeight.w800,
        ),
        headlineSmall: TextStyle(
          color: appTheme.black900,
          fontSize: 25.fSize,
          fontFamily: 'Nunito',
          fontWeight: FontWeight.w700,
        ),
        labelLarge: TextStyle(
          color: appTheme.gray800,
          fontSize: 13.fSize,
          fontFamily: 'Nunito',
          fontWeight: FontWeight.w500,
        ),
        titleLarge: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 20.fSize,
          fontFamily: 'Nunito',
          fontWeight: FontWeight.w800,
        ),
        titleMedium: TextStyle(
          color: colorScheme.onPrimaryContainer.withOpacity(1),
          fontSize: 17.fSize,
          fontFamily: 'Ubuntu',
          fontWeight: FontWeight.w700,
        ),
        titleSmall: TextStyle(
          color: appTheme.gray40002,
          fontSize: 14.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w500,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF5C5CFF),
    secondaryContainer: Color(0X195F5F5F),

    // On colors(text colors)
    onPrimary: Color(0XFF001A33),
    onPrimaryContainer: Color(0X198F8F8F),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amber500 => Color(0XFFFFB908);

  // Black
  Color get black900 => Color(0XFF000000);

  // BlueGray
  Color get blueGray100 => Color(0XFFD6D6D6);
  Color get blueGray10001 => Color(0XFFD9D9D9);
  Color get blueGray10002 => Color(0XFFD1D1D1);
  Color get blueGray50 => Color(0XFFF1F1F1);
  Color get blueGray900 => Color(0XFF303030);
  Color get blueGray90001 => Color(0XFF333333);

  // DeepPurple
  Color get deepPurpleA200 => Color(0XFF9747FF);
  Color get deepPurpleA20096 => Color(0X969647FF);

  // Gray
  Color get gray100 => Color(0XFFF4F4F4);
  Color get gray10001 => Color(0XFFF6F6F6);
  Color get gray10002 => Color(0XFFF5F5F5);
  Color get gray10003 => Color(0XFFF2F2F2);
  Color get gray200 => Color(0XFFECECEC);
  Color get gray20001 => Color(0XFFEEEEEE);
  Color get gray20002 => Color(0XFFF0F0F0);
  Color get gray20003 => Color(0XFFEAEAEA);
  Color get gray300 => Color(0XFFDFDFDF);
  Color get gray30001 => Color(0XFFDBDBDB);
  Color get gray400 => Color(0XFFB0B0B0);
  Color get gray40001 => Color(0XFFB8B8B8);
  Color get gray40002 => Color(0XFFAFAFAF);
  Color get gray40003 => Color(0XFFB3B3B3);
  Color get gray40004 => Color(0XFFC2C2C2);
  Color get gray40026 => Color(0X26C5C5C5);
  Color get gray50 => Color(0XFFF7F7FF);
  Color get gray500 => Color(0XFF939393);
  Color get gray50001 => Color(0XFFA3A3A3);
  Color get gray50002 => Color(0XFFA4A4A4);
  Color get gray50026 => Color(0X26ABABAB);
  Color get gray5001 => Color(0XFFF9F9FF);
  Color get gray5002 => Color(0XFFFCFCFC);
  Color get gray600 => Color(0XFF727272);
  Color get gray60026 => Color(0X266C6C6C);
  Color get gray700 => Color(0XFF636363);
  Color get gray800 => Color(0XFF4F4F4F);
  Color get gray80001 => Color(0XFF505050);
  Color get gray80026 => Color(0X26454545);
  Color get gray8002601 => Color(0X264E4E4E);
  Color get gray900 => Color(0XFF1F1F1F);

  // Grayf
  Color get gray4003f => Color(0X3FC8C8C8);

  // Indigo
  Color get indigoA100 => Color(0XFF8E8EFF);
  Color get indigoA10019 => Color(0X199494FF);
  Color get indigoA10026 => Color(0X26ADADFF);

  // IndigoAc
  Color get indigoA1000c => Color(0X0CA2A2FF);

  // LightBlue
  Color get lightBlue90019 => Color(0X1900498D);

  // Purple
  Color get purple10026 => Color(0X26D6ADFF);

  // White
  Color get whiteA700 => Color(0XFFFFFFFF);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
